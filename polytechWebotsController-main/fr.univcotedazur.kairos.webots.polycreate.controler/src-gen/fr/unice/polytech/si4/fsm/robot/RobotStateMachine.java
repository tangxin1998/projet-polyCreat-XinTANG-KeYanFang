/** Generated by YAKINDU Statechart Tools code generator. */
package fr.unice.polytech.si4.fsm.robot;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class RobotStateMachine implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_INIT,
		MAIN_REGION_STARTED,
		MAIN_REGION_STARTED_R1_FORWARDING,
		MAIN_REGION_STARTED_R1_TURNING_RIGHT,
		MAIN_REGION_STARTED_R1_TURNING_LEFT,
		MAIN_REGION_STARTED_R1_TURNING_BACK,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(RobotStateMachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(RobotStateMachine.this) {
			this.isExecuting = value;
		}
	}
	public RobotStateMachine() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		leftBump = false;
		rightBump = false;
		senseFall = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_INIT:
			main_region_init_react(-1);
			break;
		case MAIN_REGION_STARTED_R1_FORWARDING:
			main_region_started_r1_forwarding_react(-1);
			break;
		case MAIN_REGION_STARTED_R1_TURNING_RIGHT:
			main_region_started_r1_turning_right_react(-1);
			break;
		case MAIN_REGION_STARTED_R1_TURNING_LEFT:
			main_region_started_r1_turning_left_react(-1);
			break;
		case MAIN_REGION_STARTED_R1_TURNING_BACK:
			main_region_started_r1_turning_back_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((leftBump || rightBump) || senseFall) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_INIT:
			return stateVector[0] == State.MAIN_REGION_INIT;
		case MAIN_REGION_STARTED:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_STARTED.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_STARTED_R1_TURNING_BACK.ordinal();
		case MAIN_REGION_STARTED_R1_FORWARDING:
			return stateVector[0] == State.MAIN_REGION_STARTED_R1_FORWARDING;
		case MAIN_REGION_STARTED_R1_TURNING_RIGHT:
			return stateVector[0] == State.MAIN_REGION_STARTED_R1_TURNING_RIGHT;
		case MAIN_REGION_STARTED_R1_TURNING_LEFT:
			return stateVector[0] == State.MAIN_REGION_STARTED_R1_TURNING_LEFT;
		case MAIN_REGION_STARTED_R1_TURNING_BACK:
			return stateVector[0] == State.MAIN_REGION_STARTED_R1_TURNING_BACK;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean leftBump;
	
	
	public void raiseLeftBump() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				leftBump = true;
			});
			runCycle();
		}
	}
	
	private boolean rightBump;
	
	
	public void raiseRightBump() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				rightBump = true;
			});
			runCycle();
		}
	}
	
	private boolean senseFall;
	
	
	public void raiseSenseFall() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				senseFall = true;
			});
			runCycle();
		}
	}
	
	private boolean rightTurn;
	
	
	protected void raiseRightTurn() {
		synchronized(RobotStateMachine.this) {
			rightTurn = true;
			rightTurnObservable.next(null);
		}
	}
	
	private Observable<Void> rightTurnObservable = new Observable<Void>();
	
	public Observable<Void> getRightTurn() {
		return rightTurnObservable;
	}
	
	private boolean leftTurn;
	
	
	protected void raiseLeftTurn() {
		synchronized(RobotStateMachine.this) {
			leftTurn = true;
			leftTurnObservable.next(null);
		}
	}
	
	private Observable<Void> leftTurnObservable = new Observable<Void>();
	
	public Observable<Void> getLeftTurn() {
		return leftTurnObservable;
	}
	
	private boolean backTurn;
	
	
	protected void raiseBackTurn() {
		synchronized(RobotStateMachine.this) {
			backTurn = true;
			backTurnObservable.next(null);
		}
	}
	
	private Observable<Void> backTurnObservable = new Observable<Void>();
	
	public Observable<Void> getBackTurn() {
		return backTurnObservable;
	}
	
	private boolean isBump;
	
	
	protected void raiseIsBump() {
		synchronized(RobotStateMachine.this) {
			isBump = true;
			isBumpObservable.next(null);
		}
	}
	
	private Observable<Void> isBumpObservable = new Observable<Void>();
	
	public Observable<Void> getIsBump() {
		return isBumpObservable;
	}
	
	private boolean doForward;
	
	
	protected void raiseDoForward() {
		synchronized(RobotStateMachine.this) {
			doForward = true;
			doForwardObservable.next(null);
		}
	}
	
	private Observable<Void> doForwardObservable = new Observable<Void>();
	
	public Observable<Void> getDoForward() {
		return doForwardObservable;
	}
	
	/* Entry action for state 'init'. */
	private void entryAction_main_region_init() {
		timerService.setTimer(this, 0, (1 * 1000), false);
	}
	
	/* Entry action for state 'forwarding'. */
	private void entryAction_main_region_started_r1_forwarding() {
		timerService.setTimer(this, 1, 100, true);
		
		raiseDoForward();
	}
	
	/* Entry action for state 'turning right'. */
	private void entryAction_main_region_started_r1_turning_right() {
		timerService.setTimer(this, 2, 500, false);
	}
	
	/* Entry action for state 'turning left'. */
	private void entryAction_main_region_started_r1_turning_left() {
		timerService.setTimer(this, 3, 500, false);
		
		raiseLeftTurn();
	}
	
	/* Entry action for state 'turning back'. */
	private void entryAction_main_region_started_r1_turning_back() {
		timerService.setTimer(this, 4, 500, false);
	}
	
	/* Exit action for state 'init'. */
	private void exitAction_main_region_init() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'forwarding'. */
	private void exitAction_main_region_started_r1_forwarding() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'turning right'. */
	private void exitAction_main_region_started_r1_turning_right() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'turning left'. */
	private void exitAction_main_region_started_r1_turning_left() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'turning back'. */
	private void exitAction_main_region_started_r1_turning_back() {
		timerService.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state init */
	private void enterSequence_main_region_init_default() {
		entryAction_main_region_init();
		stateVector[0] = State.MAIN_REGION_INIT;
	}
	
	/* 'default' enter sequence for state started */
	private void enterSequence_main_region_started_default() {
		enterSequence_main_region_started_r1_default();
	}
	
	/* 'default' enter sequence for state forwarding */
	private void enterSequence_main_region_started_r1_forwarding_default() {
		entryAction_main_region_started_r1_forwarding();
		stateVector[0] = State.MAIN_REGION_STARTED_R1_FORWARDING;
	}
	
	/* 'default' enter sequence for state turning right */
	private void enterSequence_main_region_started_r1_turning_right_default() {
		entryAction_main_region_started_r1_turning_right();
		stateVector[0] = State.MAIN_REGION_STARTED_R1_TURNING_RIGHT;
	}
	
	/* 'default' enter sequence for state turning left */
	private void enterSequence_main_region_started_r1_turning_left_default() {
		entryAction_main_region_started_r1_turning_left();
		stateVector[0] = State.MAIN_REGION_STARTED_R1_TURNING_LEFT;
	}
	
	/* 'default' enter sequence for state turning back */
	private void enterSequence_main_region_started_r1_turning_back_default() {
		entryAction_main_region_started_r1_turning_back();
		stateVector[0] = State.MAIN_REGION_STARTED_R1_TURNING_BACK;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_started_r1_default() {
		react_main_region_started_r1__entry_Default();
	}
	
	/* Default exit sequence for state init */
	private void exitSequence_main_region_init() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_init();
	}
	
	/* Default exit sequence for state forwarding */
	private void exitSequence_main_region_started_r1_forwarding() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_started_r1_forwarding();
	}
	
	/* Default exit sequence for state turning right */
	private void exitSequence_main_region_started_r1_turning_right() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_started_r1_turning_right();
	}
	
	/* Default exit sequence for state turning left */
	private void exitSequence_main_region_started_r1_turning_left() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_started_r1_turning_left();
	}
	
	/* Default exit sequence for state turning back */
	private void exitSequence_main_region_started_r1_turning_back() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_started_r1_turning_back();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_INIT:
			exitSequence_main_region_init();
			break;
		case MAIN_REGION_STARTED_R1_FORWARDING:
			exitSequence_main_region_started_r1_forwarding();
			break;
		case MAIN_REGION_STARTED_R1_TURNING_RIGHT:
			exitSequence_main_region_started_r1_turning_right();
			break;
		case MAIN_REGION_STARTED_R1_TURNING_LEFT:
			exitSequence_main_region_started_r1_turning_left();
			break;
		case MAIN_REGION_STARTED_R1_TURNING_BACK:
			exitSequence_main_region_started_r1_turning_back();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_started_r1__entry_Default() {
		enterSequence_main_region_started_r1_forwarding_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_init_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_main_region_init();
				enterSequence_main_region_started_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_started_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_started_r1_forwarding_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (leftBump) {
				exitSequence_main_region_started_r1_forwarding();
				raiseRightTurn();
				
				enterSequence_main_region_started_r1_turning_right_default();
				main_region_started_react(0);
				
				transitioned_after = 0;
			} else {
				if (rightBump) {
					exitSequence_main_region_started_r1_forwarding();
					raiseLeftTurn();
					
					enterSequence_main_region_started_r1_turning_left_default();
					main_region_started_react(0);
					
					transitioned_after = 0;
				} else {
					if (senseFall) {
						exitSequence_main_region_started_r1_forwarding();
						raiseBackTurn();
						
						enterSequence_main_region_started_r1_turning_back_default();
						main_region_started_react(0);
						
						transitioned_after = 0;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[1]) {
				raiseIsBump();
			}
			transitioned_after = main_region_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_started_r1_turning_right_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_main_region_started_r1_turning_right();
				enterSequence_main_region_started_r1_forwarding_default();
				main_region_started_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_started_r1_turning_left_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[3]) {
				exitSequence_main_region_started_r1_turning_left();
				enterSequence_main_region_started_r1_forwarding_default();
				main_region_started_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_started_r1_turning_back_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[4]) {
				exitSequence_main_region_started_r1_turning_back();
				enterSequence_main_region_started_r1_forwarding_default();
				main_region_started_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
