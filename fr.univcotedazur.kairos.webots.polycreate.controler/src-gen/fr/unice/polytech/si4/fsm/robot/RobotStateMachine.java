/** Generated by YAKINDU Statechart Tools code generator. */
package fr.unice.polytech.si4.fsm.robot;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class RobotStateMachine implements IStatemachine, ITimed {
	public enum State {
		Z_STARTED,
		Z_STARTED_R1_TURNINGRIGHT,
		Z_STARTED_R1_FORWARDING,
		Z_STARTED_R1_TURNINGLEFT,
		Z_STARTED_R1_TURNINGBACK,
		Z_STARTED_A_DOSWEEPING,
		Z_STARTED_A_OBJECTMOVING,
		Z_STARTED_A_OBJECTINHAND,
		Z_STARTED_A_DRAWCIRCLE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(RobotStateMachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(RobotStateMachine.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(RobotStateMachine.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(RobotStateMachine.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public RobotStateMachine() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_z_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_z();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		leftBump = false;
		rightBump = false;
		senseWall = false;
		detectObject = false;
		reachDestination = false;
		leftButton = false;
		rightButton = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		
		switch (stateVector[0]) {
		case Z_STARTED_R1_TURNINGRIGHT:
			transitioned = z_started_r1_turningRight_react(transitioned);
			break;
		case Z_STARTED_R1_FORWARDING:
			transitioned = z_started_r1_forwarding_react(transitioned);
			break;
		case Z_STARTED_R1_TURNINGLEFT:
			transitioned = z_started_r1_turningLeft_react(transitioned);
			break;
		case Z_STARTED_R1_TURNINGBACK:
			transitioned = z_started_r1_turningBack_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case Z_STARTED_A_DOSWEEPING:
				transitioned = z_started_a_doSweeping_react(transitioned);
				break;
			case Z_STARTED_A_OBJECTMOVING:
				transitioned = z_started_a_objectMoving_react(transitioned);
				break;
			case Z_STARTED_A_OBJECTINHAND:
				transitioned = z_started_a_objectInHand_react(transitioned);
				break;
			case Z_STARTED_A_DRAWCIRCLE:
				transitioned = z_started_a_drawCircle_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while (((((((((((leftBump || rightBump) || senseWall) || detectObject) || reachDestination) || leftButton) || rightButton) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case Z_STARTED:
			return stateVector[0].ordinal() >= State.
					Z_STARTED.ordinal()&& stateVector[0].ordinal() <= State.Z_STARTED_A_DRAWCIRCLE.ordinal();
		case Z_STARTED_R1_TURNINGRIGHT:
			return stateVector[0] == State.Z_STARTED_R1_TURNINGRIGHT;
		case Z_STARTED_R1_FORWARDING:
			return stateVector[0] == State.Z_STARTED_R1_FORWARDING;
		case Z_STARTED_R1_TURNINGLEFT:
			return stateVector[0] == State.Z_STARTED_R1_TURNINGLEFT;
		case Z_STARTED_R1_TURNINGBACK:
			return stateVector[0] == State.Z_STARTED_R1_TURNINGBACK;
		case Z_STARTED_A_DOSWEEPING:
			return stateVector[1] == State.Z_STARTED_A_DOSWEEPING;
		case Z_STARTED_A_OBJECTMOVING:
			return stateVector[1] == State.Z_STARTED_A_OBJECTMOVING;
		case Z_STARTED_A_OBJECTINHAND:
			return stateVector[1] == State.Z_STARTED_A_OBJECTINHAND;
		case Z_STARTED_A_DRAWCIRCLE:
			return stateVector[1] == State.Z_STARTED_A_DRAWCIRCLE;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean leftBump;
	
	
	public void raiseLeftBump() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				leftBump = true;
			});
			runCycle();
		}
	}
	
	private boolean rightBump;
	
	
	public void raiseRightBump() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				rightBump = true;
			});
			runCycle();
		}
	}
	
	private boolean senseWall;
	
	
	public void raiseSenseWall() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				senseWall = true;
			});
			runCycle();
		}
	}
	
	private boolean detectObject;
	
	
	public void raiseDetectObject() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				detectObject = true;
			});
			runCycle();
		}
	}
	
	private boolean reachDestination;
	
	
	public void raiseReachDestination() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				reachDestination = true;
			});
			runCycle();
		}
	}
	
	private boolean leftButton;
	
	
	public void raiseLeftButton() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				leftButton = true;
			});
			runCycle();
		}
	}
	
	private boolean rightButton;
	
	
	public void raiseRightButton() {
		synchronized(RobotStateMachine.this) {
			inEventQueue.add(() -> {
				rightButton = true;
			});
			runCycle();
		}
	}
	
	private boolean rightTurn;
	
	
	protected void raiseRightTurn() {
		synchronized(RobotStateMachine.this) {
			rightTurn = true;
			rightTurnObservable.next(null);
		}
	}
	
	private Observable<Void> rightTurnObservable = new Observable<Void>();
	
	public Observable<Void> getRightTurn() {
		return rightTurnObservable;
	}
	
	private boolean leftTurn;
	
	
	protected void raiseLeftTurn() {
		synchronized(RobotStateMachine.this) {
			leftTurn = true;
			leftTurnObservable.next(null);
		}
	}
	
	private Observable<Void> leftTurnObservable = new Observable<Void>();
	
	public Observable<Void> getLeftTurn() {
		return leftTurnObservable;
	}
	
	private boolean backTurn;
	
	
	protected void raiseBackTurn() {
		synchronized(RobotStateMachine.this) {
			backTurn = true;
			backTurnObservable.next(null);
		}
	}
	
	private Observable<Void> backTurnObservable = new Observable<Void>();
	
	public Observable<Void> getBackTurn() {
		return backTurnObservable;
	}
	
	private boolean doForward;
	
	
	protected void raiseDoForward() {
		synchronized(RobotStateMachine.this) {
			doForward = true;
			doForwardObservable.next(null);
		}
	}
	
	private Observable<Void> doForwardObservable = new Observable<Void>();
	
	public Observable<Void> getDoForward() {
		return doForwardObservable;
	}
	
	private boolean drawCircle;
	
	
	protected void raiseDrawCircle() {
		synchronized(RobotStateMachine.this) {
			drawCircle = true;
			drawCircleObservable.next(null);
		}
	}
	
	private Observable<Void> drawCircleObservable = new Observable<Void>();
	
	public Observable<Void> getDrawCircle() {
		return drawCircleObservable;
	}
	
	private boolean doSweeping;
	
	
	protected void raiseDoSweeping() {
		synchronized(RobotStateMachine.this) {
			doSweeping = true;
			doSweepingObservable.next(null);
		}
	}
	
	private Observable<Void> doSweepingObservable = new Observable<Void>();
	
	public Observable<Void> getDoSweeping() {
		return doSweepingObservable;
	}
	
	private boolean catchObject;
	
	
	protected void raiseCatchObject() {
		synchronized(RobotStateMachine.this) {
			catchObject = true;
			catchObjectObservable.next(null);
		}
	}
	
	private Observable<Void> catchObjectObservable = new Observable<Void>();
	
	public Observable<Void> getCatchObject() {
		return catchObjectObservable;
	}
	
	private boolean releaseObject;
	
	
	protected void raiseReleaseObject() {
		synchronized(RobotStateMachine.this) {
			releaseObject = true;
			releaseObjectObservable.next(null);
		}
	}
	
	private Observable<Void> releaseObjectObservable = new Observable<Void>();
	
	public Observable<Void> getReleaseObject() {
		return releaseObjectObservable;
	}
	
	private boolean searchObject;
	
	
	protected void raiseSearchObject() {
		synchronized(RobotStateMachine.this) {
			searchObject = true;
			searchObjectObservable.next(null);
		}
	}
	
	private Observable<Void> searchObjectObservable = new Observable<Void>();
	
	public Observable<Void> getSearchObject() {
		return searchObjectObservable;
	}
	
	private boolean isBump;
	
	
	protected void raiseIsBump() {
		synchronized(RobotStateMachine.this) {
			isBump = true;
			isBumpObservable.next(null);
		}
	}
	
	private Observable<Void> isBumpObservable = new Observable<Void>();
	
	public Observable<Void> getIsBump() {
		return isBumpObservable;
	}
	
	private boolean doWriting;
	
	
	protected void raiseDoWriting() {
		synchronized(RobotStateMachine.this) {
			doWriting = true;
			doWritingObservable.next(null);
		}
	}
	
	private Observable<Void> doWritingObservable = new Observable<Void>();
	
	public Observable<Void> getDoWriting() {
		return doWritingObservable;
	}
	
	private boolean inputPlace;
	
	
	protected void raiseInputPlace() {
		synchronized(RobotStateMachine.this) {
			inputPlace = true;
			inputPlaceObservable.next(null);
		}
	}
	
	private Observable<Void> inputPlaceObservable = new Observable<Void>();
	
	public Observable<Void> getInputPlace() {
		return inputPlaceObservable;
	}
	
	/* Entry action for state 'turningRight'. */
	private void entryAction_z_started_r1_turningRight() {
		timerService.setTimer(this, 0, 500, false);
		
		raiseRightTurn();
	}
	
	/* Entry action for state 'forwarding'. */
	private void entryAction_z_started_r1_forwarding() {
		raiseDoForward();
	}
	
	/* Entry action for state 'turningLeft'. */
	private void entryAction_z_started_r1_turningLeft() {
		timerService.setTimer(this, 1, 500, false);
		
		raiseLeftTurn();
	}
	
	/* Entry action for state 'turningBack'. */
	private void entryAction_z_started_r1_turningBack() {
		timerService.setTimer(this, 2, 500, false);
	}
	
	/* Entry action for state 'doSweeping'. */
	private void entryAction_z_started_a_doSweeping() {
		raiseDoSweeping();
	}
	
	/* Entry action for state 'objectMoving'. */
	private void entryAction_z_started_a_objectMoving() {
		timerService.setTimer(this, 3, 10, true);
	}
	
	/* Entry action for state 'drawCircle'. */
	private void entryAction_z_started_a_drawCircle() {
		raiseDrawCircle();
	}
	
	/* Exit action for state 'turningRight'. */
	private void exitAction_z_started_r1_turningRight() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'turningLeft'. */
	private void exitAction_z_started_r1_turningLeft() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'turningBack'. */
	private void exitAction_z_started_r1_turningBack() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'objectMoving'. */
	private void exitAction_z_started_a_objectMoving() {
		timerService.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state started */
	private void enterSequence_z_started_default() {
		enterSequence_z_started_r1_default();
		enterSequence_z_started_a_default();
	}
	
	/* 'default' enter sequence for state turningRight */
	private void enterSequence_z_started_r1_turningRight_default() {
		entryAction_z_started_r1_turningRight();
		stateVector[0] = State.Z_STARTED_R1_TURNINGRIGHT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state forwarding */
	private void enterSequence_z_started_r1_forwarding_default() {
		entryAction_z_started_r1_forwarding();
		stateVector[0] = State.Z_STARTED_R1_FORWARDING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state turningLeft */
	private void enterSequence_z_started_r1_turningLeft_default() {
		entryAction_z_started_r1_turningLeft();
		stateVector[0] = State.Z_STARTED_R1_TURNINGLEFT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state turningBack */
	private void enterSequence_z_started_r1_turningBack_default() {
		entryAction_z_started_r1_turningBack();
		stateVector[0] = State.Z_STARTED_R1_TURNINGBACK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state doSweeping */
	private void enterSequence_z_started_a_doSweeping_default() {
		entryAction_z_started_a_doSweeping();
		stateVector[1] = State.Z_STARTED_A_DOSWEEPING;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state objectMoving */
	private void enterSequence_z_started_a_objectMoving_default() {
		entryAction_z_started_a_objectMoving();
		stateVector[1] = State.Z_STARTED_A_OBJECTMOVING;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state objectInHand */
	private void enterSequence_z_started_a_objectInHand_default() {
		stateVector[1] = State.Z_STARTED_A_OBJECTINHAND;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state drawCircle */
	private void enterSequence_z_started_a_drawCircle_default() {
		entryAction_z_started_a_drawCircle();
		stateVector[1] = State.Z_STARTED_A_DRAWCIRCLE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region z */
	private void enterSequence_z_default() {
		react_z__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_z_started_r1_default() {
		react_z_started_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region a */
	private void enterSequence_z_started_a_default() {
		react_z_started_a__entry_Default();
	}
	
	/* Default exit sequence for state turningRight */
	private void exitSequence_z_started_r1_turningRight() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_z_started_r1_turningRight();
	}
	
	/* Default exit sequence for state forwarding */
	private void exitSequence_z_started_r1_forwarding() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state turningLeft */
	private void exitSequence_z_started_r1_turningLeft() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_z_started_r1_turningLeft();
	}
	
	/* Default exit sequence for state turningBack */
	private void exitSequence_z_started_r1_turningBack() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_z_started_r1_turningBack();
	}
	
	/* Default exit sequence for state doSweeping */
	private void exitSequence_z_started_a_doSweeping() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state objectMoving */
	private void exitSequence_z_started_a_objectMoving() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_z_started_a_objectMoving();
	}
	
	/* Default exit sequence for state objectInHand */
	private void exitSequence_z_started_a_objectInHand() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state drawCircle */
	private void exitSequence_z_started_a_drawCircle() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region z */
	private void exitSequence_z() {
		switch (stateVector[0]) {
		case Z_STARTED_R1_TURNINGRIGHT:
			exitSequence_z_started_r1_turningRight();
			break;
		case Z_STARTED_R1_FORWARDING:
			exitSequence_z_started_r1_forwarding();
			break;
		case Z_STARTED_R1_TURNINGLEFT:
			exitSequence_z_started_r1_turningLeft();
			break;
		case Z_STARTED_R1_TURNINGBACK:
			exitSequence_z_started_r1_turningBack();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case Z_STARTED_A_DOSWEEPING:
			exitSequence_z_started_a_doSweeping();
			break;
		case Z_STARTED_A_OBJECTMOVING:
			exitSequence_z_started_a_objectMoving();
			break;
		case Z_STARTED_A_OBJECTINHAND:
			exitSequence_z_started_a_objectInHand();
			break;
		case Z_STARTED_A_DRAWCIRCLE:
			exitSequence_z_started_a_drawCircle();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_z_started_r1__entry_Default() {
		enterSequence_z_started_r1_forwarding_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_z_started_a__entry_Default() {
		enterSequence_z_started_a_doSweeping_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_z__entry_Default() {
		enterSequence_z_started_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long z_started_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long z_started_r1_turningRight_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_z_started_r1_turningRight();
				enterSequence_z_started_r1_forwarding_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long z_started_r1_forwarding_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (rightBump) {
				exitSequence_z_started_r1_forwarding();
				enterSequence_z_started_r1_turningRight_default();
				transitioned_after = 0;
			} else {
				if (leftBump) {
					exitSequence_z_started_r1_forwarding();
					enterSequence_z_started_r1_turningLeft_default();
					transitioned_after = 0;
				} else {
					if (senseWall) {
						exitSequence_z_started_r1_forwarding();
						raiseBackTurn();
						
						enterSequence_z_started_r1_turningBack_default();
						transitioned_after = 0;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long z_started_r1_turningLeft_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[1]) {
				exitSequence_z_started_r1_turningLeft();
				enterSequence_z_started_r1_forwarding_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long z_started_r1_turningBack_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_z_started_r1_turningBack();
				enterSequence_z_started_r1_forwarding_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long z_started_a_doSweeping_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (rightButton) {
				exitSequence_z_started_a_doSweeping();
				raiseInputPlace();
				
				enterSequence_z_started_a_objectMoving_default();
				z_started_react(0);
				
				transitioned_after = 1;
			} else {
				if (leftButton) {
					exitSequence_z_started_a_doSweeping();
					enterSequence_z_started_a_drawCircle_default();
					z_started_react(0);
					
					transitioned_after = 1;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = z_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long z_started_a_objectMoving_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (detectObject) {
				exitSequence_z_started_a_objectMoving();
				raiseCatchObject();
				
				enterSequence_z_started_a_objectInHand_default();
				z_started_react(0);
				
				transitioned_after = 1;
			} else {
				if (timeEvents[3]) {
					exitSequence_z_started_a_objectMoving();
					raiseSearchObject();
					
					enterSequence_z_started_a_objectMoving_default();
					z_started_react(0);
					
					transitioned_after = 1;
				} else {
					if (rightButton) {
						exitSequence_z_started_a_objectMoving();
						enterSequence_z_started_a_doSweeping_default();
						z_started_react(0);
						
						transitioned_after = 1;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = z_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long z_started_a_objectInHand_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (reachDestination) {
				exitSequence_z_started_a_objectInHand();
				raiseReleaseObject();
				
				enterSequence_z_started_a_objectMoving_default();
				z_started_react(0);
				
				transitioned_after = 1;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = z_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long z_started_a_drawCircle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (leftButton) {
				exitSequence_z_started_a_drawCircle();
				enterSequence_z_started_a_doSweeping_default();
				z_started_react(0);
				
				transitioned_after = 1;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = z_started_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
